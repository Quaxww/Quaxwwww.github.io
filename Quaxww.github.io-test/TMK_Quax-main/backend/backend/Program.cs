using System.ComponentModel.DataAnnotations;
using System.Text.Encodings.Web;
using Telegram.Bot;
using Telegram.Bot.Exceptions;
using Telegram.Bot.Polling;
using Telegram.Bot.Types;
using Telegram.Bot.Types.Enums;
using Telegram.Bot.Types.ReplyMarkups;
using ConsoleApp1.Database;
using ConsoleApp1.Database.Entities;
using Microsoft.EntityFrameworkCore;

class Program
{
    private static ITelegramBotClient? _botClient;
    private static ReceiverOptions? _receiverOptions;
    private static Dictionary<long, string> _userRoles = new Dictionary<long, string>(); // chatId -> role
    private static Dictionary<long, bool> _managerAuthenticated = new Dictionary<long, bool>(); // chatId -> isAuthenticated
    private const string MANAGER_PASSWORD = "manager123"; // –ü–∞—Ä–æ–ª—å –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞

    static async Task Main()
    {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        await InitializeDatabaseAsync();

        // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ç–æ–∫–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏ –±–æ—Ç —Å–æ–∑–¥–∞–Ω —á–µ—Ä–µ–∑ @BotFather
        _botClient = new TelegramBotClient("8397722379:AAHXWFHDnBH3z6xVTZGW4sp8Sly8MqdcfTw");

        _receiverOptions = new ReceiverOptions
        {
            AllowedUpdates = Array.Empty<UpdateType>(), // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–∏–ø—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
            ThrowPendingUpdates = true,
        };

        using var cts = new CancellationTokenSource();

        // –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        _botClient.StartReceiving(
            updateHandler: HandleUpdateAsync,
            pollingErrorHandler: HandlePollingErrorAsync,
            receiverOptions: _receiverOptions,
            cancellationToken: cts.Token
        );

        var me = await _botClient.GetMeAsync();
        Console.WriteLine($"–ë–æ—Ç {me.FirstName} —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!");
        Console.WriteLine("–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...");

        // –û–∂–∏–¥–∞–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ
        await Task.Delay(-1, cts.Token);
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    static async Task InitializeDatabaseAsync()
    {
        using var context = new Context();

        // –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ —Ç–∞–±–ª–∏—Ü
        await context.Database.EnsureCreatedAsync();

        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –±–∞–∑–∞ –ø—É—Å—Ç–∞—è
        if (!context.Users.Any())
        {
            var user1 = new User { Name = "–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤" };
            var user2 = new User { Name = "–ü–µ—Ç—Ä –ü–µ—Ç—Ä–æ–≤" };

            context.Users.AddRange(user1, user2);
            await context.SaveChangesAsync();
            Console.WriteLine("–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã.");
        }
    }

    // –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏
    private static ReplyKeyboardMarkup GetRoleSelectionKeyboard()
    {
        return new ReplyKeyboardMarkup(new[]
        {
            new[]
            {
                new KeyboardButton("üë§ –ó–∞–∫–∞–∑—á–∏–∫"),
                new KeyboardButton("üë®‚Äçüíº –ú–µ–Ω–µ–¥–∂–µ—Ä")
            }
        })
        {
            ResizeKeyboard = true,
            OneTimeKeyboard = false
        };
    }

    // –ú–µ–Ω—é –¥–ª—è –∑–∞–∫–∞–∑—á–∏–∫–∞
    private static ReplyKeyboardMarkup GetCustomerKeyboard()
    {
        return new ReplyKeyboardMarkup(new[]
        {
            new[]
            {
                new KeyboardButton("üåê –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç"),
                new KeyboardButton("üìä –û—Ç—Å–ª–µ–¥–∏—Ç—å –∑–∞–∫–∞–∑")
            },
            new[]
            {
                new KeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É —Ä–æ–ª–∏")
            }
        })
        {
            ResizeKeyboard = true,
            OneTimeKeyboard = false
        };
    }

    // –ú–µ–Ω—é –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ (–¥–æ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏)
    private static ReplyKeyboardMarkup GetManagerAuthKeyboard()
    {
        return new ReplyKeyboardMarkup(new[]
        {
            new[]
            {
                new KeyboardButton("üîê –í–æ–π—Ç–∏ –∫–∞–∫ –º–µ–Ω–µ–¥–∂–µ—Ä")
            },
            new[]
            {
                new KeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É —Ä–æ–ª–∏")
            }
        })
        {
            ResizeKeyboard = true,
            OneTimeKeyboard = false
        };
    }

    // –ú–µ–Ω—é –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ (–ø–æ—Å–ª–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏)
    private static ReplyKeyboardMarkup GetManagerKeyboard()
    {
        return new ReplyKeyboardMarkup(new[]
        {
            new[]
            {
                new KeyboardButton("üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã"),
                new KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
            },
            new[]
            {
                new KeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É —Ä–æ–ª–∏")
            }
        })
        {
            ResizeKeyboard = true,
            OneTimeKeyboard = false
        };
    }

    // Inline –∫–Ω–æ–ø–∫–∞ –¥–ª—è –≤–µ–±-—Å–∞–π—Ç–∞
    private static InlineKeyboardMarkup GetWebsiteInlineKeyboard()
    {
        var webAppInfo = new WebAppInfo { Url = "https://quaxww.github.io/" };
        var webAppButton = InlineKeyboardButton.WithWebApp("üåê –û—Ç–∫—Ä—ã—Ç—å —Å–∞–π—Ç –¢–ú–ö", webAppInfo);
        return new InlineKeyboardMarkup(webAppButton);
    }

    private static async Task HandleUpdateAsync(ITelegramBotClient botClient, Update update, CancellationToken cancellationToken)
    {
        try
        {
            switch (update.Type)
            {
                case UpdateType.Message:
                    await HandleMessageAsync(botClient, update.Message, cancellationToken);
                    break;

                case UpdateType.CallbackQuery:
                    Console.WriteLine("–ü—Ä–∏—à–µ–ª callback query");
                    break;

                default:
                    Console.WriteLine($"–ü–æ–ª—É—á–µ–Ω –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {update.Type}");
                    break;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {ex}");
        }
    }

    private static async Task HandleMessageAsync(ITelegramBotClient botClient, Message message, CancellationToken cancellationToken)
    {
        if (message?.Text == null)
            return;

        var chatId = message.Chat.Id;
        var userName = message.From?.FirstName ?? "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å";
        var messageText = message.Text;

        Console.WriteLine($"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {userName} (ID: {chatId}): {messageText}");

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
        if (messageText.StartsWith('/'))
        {
            await HandleCommandAsync(botClient, chatId, userName, messageText, cancellationToken);
            return;
        }

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (!_userRoles.ContainsKey(chatId))
        {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Ä–æ–ª–∏ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            await ShowRoleSelection(botClient, chatId, userName, cancellationToken);
            return;
        }

        var userRole = _userRoles[chatId];

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
        if (userRole == "customer")
        {
            await HandleCustomerMessageAsync(botClient, chatId, userName, messageText, cancellationToken);
        }
        else if (userRole == "manager")
        {
            await HandleManagerMessageAsync(botClient, chatId, userName, messageText, cancellationToken);
        }
    }

    private static async Task HandleCommandAsync(ITelegramBotClient botClient, long chatId, string userName, string command, CancellationToken cancellationToken)
    {
        switch (command.ToLower())
        {
            case "/start":
                _userRoles.Remove(chatId); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ä–æ–ª—å –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
                _managerAuthenticated.Remove(chatId); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
                await ShowRoleSelection(botClient, chatId, userName, cancellationToken);
                break;

            case "/help":
                await ShowHelp(botClient, chatId, cancellationToken);
                break;

            default:
                await botClient.SendTextMessageAsync(
                    chatId: chatId,
                    text: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.",
                    cancellationToken: cancellationToken);
                break;
        }
    }

    private static async Task HandleCustomerMessageAsync(ITelegramBotClient botClient, long chatId, string userName, string messageText, CancellationToken cancellationToken)
    {
        switch (messageText)
        {
            case "üåê –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç":
                await ShowWebsite(botClient, chatId, cancellationToken);
                break;

            case "üìä –û—Ç—Å–ª–µ–¥–∏—Ç—å –∑–∞–∫–∞–∑":
                await TrackOrder(botClient, chatId, cancellationToken);
                break;

            case "üîô –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É —Ä–æ–ª–∏":
                _userRoles.Remove(chatId);
                await ShowRoleSelection(botClient, chatId, userName, cancellationToken);
                break;

            default:
                await botClient.SendTextMessageAsync(
                    chatId: chatId,
                    text: "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:",
                    replyMarkup: GetCustomerKeyboard(),
                    cancellationToken: cancellationToken);
                break;
        }
    }

    private static async Task HandleManagerMessageAsync(ITelegramBotClient botClient, long chatId, string userName, string messageText, CancellationToken cancellationToken)
    {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        if (!_managerAuthenticated.ContainsKey(chatId) || !_managerAuthenticated[chatId])
        {
            if (messageText == "üîê –í–æ–π—Ç–∏ –∫–∞–∫ –º–µ–Ω–µ–¥–∂–µ—Ä")
            {
                await botClient.SendTextMessageAsync(
                    chatId: chatId,
                    text: "üîê –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–Ω–µ–ª–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞:",
                    cancellationToken: cancellationToken);
                return;
            }

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è
            if (messageText == MANAGER_PASSWORD)
            {
                _managerAuthenticated[chatId] = true;
                await botClient.SendTextMessageAsync(
                    chatId: chatId,
                    text: "‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞.",
                    replyMarkup: GetManagerKeyboard(),
                    cancellationToken: cancellationToken);
            }
            else if (!string.IsNullOrEmpty(messageText))
            {
                await botClient.SendTextMessageAsync(
                    chatId: chatId,
                    text: "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞–∑–∞–¥.",
                    replyMarkup: GetManagerAuthKeyboard(),
                    cancellationToken: cancellationToken);
            }
            return;
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        switch (messageText)
        {
            case "üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã":
                await ShowActiveOrders(botClient, chatId, cancellationToken);
                break;

            case "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
                await ShowStatistics(botClient, chatId, cancellationToken);
                break;

            case "üîô –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É —Ä–æ–ª–∏":
                _userRoles.Remove(chatId);
                _managerAuthenticated.Remove(chatId);
                await ShowRoleSelection(botClient, chatId, userName, cancellationToken);
                break;

            default:
                await botClient.SendTextMessageAsync(
                    chatId: chatId,
                    text: "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:",
                    replyMarkup: GetManagerKeyboard(),
                    cancellationToken: cancellationToken);
                break;
        }
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä —Ä–æ–ª–∏
    private static async Task ShowRoleSelection(ITelegramBotClient botClient, long chatId, string userName, CancellationToken cancellationToken)
    {
        await botClient.SendTextMessageAsync(
            chatId: chatId,
            text: $"üëã –ü—Ä–∏–≤–µ—Ç, {userName}!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å:",
            replyMarkup: GetRoleSelectionKeyboard(),
            cancellationToken: cancellationToken);
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏
    public static async Task HandleRoleSelection(ITelegramBotClient botClient, long chatId, string userName, string role, CancellationToken cancellationToken)
    {
        _userRoles[chatId] = role;

        if (role == "customer")
        {
            await botClient.SendTextMessageAsync(
                chatId: chatId,
                text: $"üë§ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {userName}!\n\n–í—ã –≤–æ—à–ª–∏ –∫–∞–∫ –∑–∞–∫–∞–∑—á–∏–∫. –í—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç –∏–ª–∏ –æ—Ç—Å–ª–µ–¥–∏—Ç—å —Å–≤–æ–π –∑–∞–∫–∞–∑.",
                replyMarkup: GetCustomerKeyboard(),
                cancellationToken: cancellationToken);
        }
        else if (role == "manager")
        {
            _managerAuthenticated[chatId] = false;
            await botClient.SendTextMessageAsync(
                chatId: chatId,
                text: $"üë®‚Äçüíº –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {userName}!\n\n–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–Ω–µ–ª–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è.",
                replyMarkup: GetManagerAuthKeyboard(),
                cancellationToken: cancellationToken);
        }
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å —Å–∞–π—Ç
    private static async Task ShowWebsite(ITelegramBotClient botClient, long chatId, CancellationToken cancellationToken)
    {
        await botClient.SendTextMessageAsync(
            chatId: chatId,
            text: "üåê **–°–∞–π—Ç –¢–ú–ö**\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å —Å–∞–π—Ç:",
            parseMode: ParseMode.Markdown,
            replyMarkup: GetWebsiteInlineKeyboard(),
            cancellationToken: cancellationToken);
    }

    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
    private static async Task TrackOrder(ITelegramBotClient botClient, long chatId, CancellationToken cancellationToken)
    {
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫–∞–∑–µ
        var orderInfo = @"üìä **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–º –∑–∞–∫–∞–∑–µ**

üÜî –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: TMK-20240115-0001
üìÖ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: 15.01.2024
üí∞ –°—É–º–º–∞: 150 000 ‚ÇΩ
üì¶ –°—Ç–∞—Ç—É—Å: –í –æ–±—Ä–∞–±–æ—Ç–∫–µ

üìã **–°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:**
‚Ä¢ –¢—Ä—É–±–∞ —Å—Ç–∞–ª—å–Ω–∞—è 57x3.5 - 100 –º
‚Ä¢ –¢—Ä—É–±–∞ —Å—Ç–∞–ª—å–Ω–∞—è 89x4 - 50 –º
‚Ä¢ –¢—Ä—É–±–∞ —Å—Ç–∞–ª—å–Ω–∞—è 108x4.5 - 25 –º

‚è≥ –û–∂–∏–¥–∞–µ–º–∞—è –¥–∞—Ç–∞ –æ—Ç–≥—Ä—É–∑–∫–∏: 20.01.2024";

        await botClient.SendTextMessageAsync(
            chatId: chatId,
            text: orderInfo,
            parseMode: ParseMode.Markdown,
            replyMarkup: GetCustomerKeyboard(),
            cancellationToken: cancellationToken);
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã (–¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞)
    private static async Task ShowActiveOrders(ITelegramBotClient botClient, long chatId, CancellationToken cancellationToken)
    {
        using var context = new Context();
        var users = await context.Users.ToListAsync();

        var ordersInfo = "üìã **–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã**\n\n";

        // –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ - –≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ –ë–î –∑–∞–∫–∞–∑–æ–≤
        var demoOrders = new[]
        {
            new { Id = "TMK-20240115-0001", Customer = "–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤", Amount = "150 000 ‚ÇΩ", Status = "–í –æ–±—Ä–∞–±–æ—Ç–∫–µ" },
            new { Id = "TMK-20240116-0002", Customer = "–ü–µ—Ç—Ä –ü–µ—Ç—Ä–æ–≤", Amount = "85 000 ‚ÇΩ", Status = "–í –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ" },
            new { Id = "TMK-20240117-0003", Customer = "–°–µ—Ä–≥–µ–π –°–∏–¥–æ—Ä–æ–≤", Amount = "210 000 ‚ÇΩ", Status = "–ì–æ—Ç–æ–≤ –∫ –æ—Ç–≥—Ä—É–∑–∫–µ" }
        };

        foreach (var order in demoOrders)
        {
            ordersInfo += $"üÜî **{order.Id}**\n";
            ordersInfo += $"üë§ –ö–ª–∏–µ–Ω—Ç: {order.Customer}\n";
            ordersInfo += $"üí∞ –°—É–º–º–∞: {order.Amount}\n";
            ordersInfo += $"üì¶ –°—Ç–∞—Ç—É—Å: {order.Status}\n\n";
        }

        ordersInfo += $"–í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤: {demoOrders.Length}";

        await botClient.SendTextMessageAsync(
            chatId: chatId,
            text: ordersInfo,
            parseMode: ParseMode.Markdown,
            replyMarkup: GetManagerKeyboard(),
            cancellationToken: cancellationToken);
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (–¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞)
    private static async Task ShowStatistics(ITelegramBotClient botClient, long chatId, CancellationToken cancellationToken)
    {
        var statistics = @"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —è–Ω–≤–∞—Ä—å 2024**

üí∞ –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: 2 450 000 ‚ÇΩ
üì¶ –ó–∞–∫–∞–∑–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: 28
üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤: 15
‚≠ê –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: 4.8/5

üìà **–¢–æ–ø —Ç–æ–≤–∞—Ä–æ–≤:**
1. –¢—Ä—É–±–∞ —Å—Ç–∞–ª—å–Ω–∞—è 57x3.5 - 45%
2. –¢—Ä—É–±–∞ —Å—Ç–∞–ª—å–Ω–∞—è 89x4 - 30%
3. –¢—Ä—É–±–∞ —Å—Ç–∞–ª—å–Ω–∞—è 108x4.5 - 25%";

        await botClient.SendTextMessageAsync(
            chatId: chatId,
            text: statistics,
            parseMode: ParseMode.Markdown,
            replyMarkup: GetManagerKeyboard(),
            cancellationToken: cancellationToken);
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
    private static async Task ShowHelp(ITelegramBotClient botClient, long chatId, CancellationToken cancellationToken)
    {
        var helpText = @"‚ÑπÔ∏è **–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É –¢–ú–ö**

**–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É

**–î–ª—è –∑–∞–∫–∞–∑—á–∏–∫–æ–≤:**
‚Ä¢ üåê –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç - –æ—Ç–∫—Ä—ã—Ç—å —Å–∞–π—Ç –¢–ú–ö
‚Ä¢ üìä –û—Ç—Å–ª–µ–¥–∏—Ç—å –∑–∞–∫–∞–∑ - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞

**–î–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤:**
‚Ä¢ üîê –í–æ–π—Ç–∏ –∫–∞–∫ –º–µ–Ω–µ–¥–∂–µ—Ä - –¥–æ—Å—Ç—É–ø –∫ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
‚Ä¢ üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã - –ø—Ä–æ—Å–º–æ—Ç—Ä —Ç–µ–∫—É—â–∏—Ö –∑–∞–∫–∞–∑–æ–≤
‚Ä¢ üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø—Ä–æ–¥–∞–∂

–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start";

        await botClient.SendTextMessageAsync(
            chatId: chatId,
            text: helpText,
            parseMode: ParseMode.Markdown,
            replyMarkup: GetRoleSelectionKeyboard(),
            cancellationToken: cancellationToken);
    }

    private static Task HandlePollingErrorAsync(ITelegramBotClient botClient, Exception exception, CancellationToken cancellationToken)
    {
        var errorMessage = exception switch
        {
            ApiRequestException apiRequestException
                => $"Telegram API Error:\n[{apiRequestException.ErrorCode}]\n{apiRequestException.Message}",
            _ => exception.ToString()
        };

        Console.WriteLine($"–û—à–∏–±–∫–∞: {errorMessage}");
        return Task.CompletedTask;
    }
}
